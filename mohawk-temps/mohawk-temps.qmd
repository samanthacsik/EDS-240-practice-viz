---
title: "Mohawk Temperatures"
editor_options: 
  chunk_output_type: console
---

# Mohawk Bottom Temperatures

- <https://pasta.lternet.edu/package/eml/knb-lter-sbc/2007/16>

### setup
```{r}
#..........................load packages.........................
library(tidyverse)
library(chron)
library(naniar)

#..........................import data...........................
# mko <- read_csv(here::here("raw-data", "mohawk_mooring_mko_20220330.csv"), col_names = TRUE, col_types = cols(.default = col_character()))
mko <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.17&entityid=02629ecc08a536972dec021f662428aa")
```

## clean data
```{r}
#..........................wrangle data..........................
mko_clean <- mko |> 
  
  # keep only necessary columns
  select(year, month, day, decimal_time, Temp_bot, Temp_top, Temp_mid) |> 
  
  # create date time column
  unite(date, year, month, day, sep = "-", remove = FALSE) |> 
  mutate(time = chron::times(as.numeric(decimal_time))) |> 
  unite(date_time, date, time, sep = " ") |> 
  
  # coerce data types
  mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day),
         Temp_top = as.numeric(Temp_top), 
         Temp_mid = as.numeric(Temp_mid), 
         Temp_bot = as.numeric(Temp_bot)) |> 
  
  # add month abbreviation
  mutate(month_name = as.factor(month.name[month])) |> 

  # replace 9999s with NAs
  replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
  
  # select/reorder desired columns
  select(date_time, year, month, day, month_name, Temp_bot, Temp_mid, Temp_top) 

#......................explore missing data......................
# https://docs.google.com/presentation/d/1EzMU6be01aicPGeBcbXrXy1iX8CdWhBz1o2pJDPsXBM/edit#slide=id.p
# https://allisonhorst.shinyapps.io/missingexplorer/#section-introduction

# counts and percentage of missing data by year
see_NAs <- mko_clean %>% 
  group_by(year) %>% 
  naniar::miss_var_summary() |> 
  filter(variable == "Temp_bot")

# visualize missing Temp_bot 
bottom <- mko_clean |> select(Temp_bot)
naniar::vis_miss(bottom)
```

## HISTOGRAM
```{r}
# too many groups!
ggplot(mko_clean, aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5)

# better with ~3 groups (let's compare April, June, October)
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))

# change bin width
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5, binwidth = 0.5) +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
  # scale_x_continuous(expand = c(0, 0), limits = c(0, 25)) +
  # scale_y_continuous(expand = c(0, 0))
```

## DENSITY PLOT
```{r}
# too many groups!
ggplot(mko_clean, aes(x = Temp_bot, fill = month_name)) +
  geom_density(alpha = 0.5)

# better with ~3 groups (let's compare April, June, October)
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(alpha = 0.5) + # adjust = 1/2
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))

# change bandwidth (1/2 = half the default bandwidth)
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(adjust = 1/2, alpha = 0.5) + 
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

## BOX PLOT
```{r}
# works even with 12 groups, but is a lot to process
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()

# modify outlier color aesthetics
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot(outlier.colour = "purple", outlier.shape = "circle open", outlier.size = 5) +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()

# remove outliers & plot jittered raw data (wayyy too much!)
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(color = "gray") +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()

# save for communication workshop -- highlight a certain group
mko_clean |> 
  mutate(highlight_october = ifelse(month_name == "October",
                                    yes = "highlight",
                                    no = "normal")) |> 
  ggplot(aes(x = month_name, y = Temp_bot, fill = highlight_october)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) +
  scale_fill_manual(values = c("#8B3A3A", "white")) +
  coord_flip() +
  theme(legend.position = "none")
```

## VIOLIN PLOT
```{r}
# works even with 12 groups, but is a lot to process
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_violin() +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
```

```{r}
ggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) +
  geom_vline(xintercept = mean(mko_clean$Temp_bot, na.rm = TRUE), linetype = "dashed") +
  # geom_vline(xintercept = 11, linetype = "dashed", color = "darkgray") +
  # geom_vline(xintercept = 16, linetype = "dashed", color = "darkgray") +
  # geom_vline(xintercept = 21, linetype = "dashed", color = "darkgray") +
  scale_y_discrete(limits = rev(month.name)) +
  scale_fill_gradientn(colors = c("#2C5374","#778798", "#ADD8E6", "#EF8080", "#8B3A3A")) +
  scale_x_continuous(breaks = seq(9, 26, by = 2)) +
  labs(x = "Bottom Temperature (°C)",
       title = "Bottom Temperatures at Mohawk Reef, Santa Barbara, CA",
       subtitle = "Temperatures (°C) aggregated by month from 2005 - 2022") +
  ggridges::theme_ridges(font_size = 13, grid = TRUE) +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(size = 30),
    plot.subtitle = element_text(size = 25, margin = margin(t = 0, r = 0, b = 20, l = 0)),
    axis.title.x = element_text(size = 23, margin = margin(t = 15, r = 0, b = 0, l = 0)),
    axis.title.y = element_blank(),
    axis.text = element_text(size = 20),
    legend.position = "none",
    panel.grid.major.x = element_blank()
  )
```


